from spectral_film_lut.film_spectral import *


class Kodak5247II(FilmSpectral):
    def __init__(self):
        super().__init__()

        self.iso = 100
        self.density_measure = 'status_m'
        self.exposure_kelvin = 3200
        self.year = 1974
        self.manufacturer = 'Kodak'
        self.stage = 'camera'
        self.type = 'negative'
        self.medium = 'cine'
        self.alias = 'Eastman Color II Negative 5247/7247'

        # spectral sensitivity
        red_log_sensitivity = {532.0665: -0.6474, 546.1726: -0.3543, 553.8888: -0.2119, 558.9589: -0.1130,
                               569.5466: 0.0327, 590.2269: 0.8068, 601.0274: 1.0263, 610.0740: 1.1251, 630.1369: 1.4886,
                               642.2792: 1.5606, 651.3435: 1.4985, 662.4237: 1.1851, 671.5182: 0.8499, 675.5228: 0.5952,
                               678.4376: 0.2064, 684.4533: -0.2562, 692.0070: -0.6416, 700.4400: -0.9885}
        green_log_sensitivity = {453.7448: 0.4255, 481.9857: 0.7504, 509.7845: 1.0787, 516.4019: 1.1692,
                                 524.5568: 1.3400, 538.6635: 1.6282, 542.8530: 1.6985, 553.8978: 1.7069,
                                 568.9223: 1.6850, 575.7730: 1.6632, 582.6370: 1.5207, 585.9672: 1.3715,
                                 593.7767: 0.6694, 600.9200: -0.0010, 603.6091: -0.3462, 610.7124: -0.6546,
                                 620.4709: -1.0015}
        blue_log_sensitivity = {350.1478: 2.3230, 388.5923: 2.2725, 405.3872: 2.2221, 416.8851: 2.1282,
                                424.4043: 2.0545, 437.6635: 2.0142, 447.8374: 1.9069, 457.1220: 1.8498,
                                469.0676: 1.7023, 488.9931: 1.3101, 502.2879: 0.9480, 511.3872: 0.5693,
                                521.3875: 0.0330, 528.7232: -0.3793, 535.8402: -0.8117, 538.5115: -0.9960}
        self.log_sensitivity = [red_log_sensitivity, green_log_sensitivity, blue_log_sensitivity]

        # sensiometry - characteristic curve
        red_curve = {0.4102: 0.1228, 0.5027: 0.1188, 0.5802: 0.1224, 0.6677: 0.1323, 0.7703: 0.1497, 0.8841: 0.1810,
                     0.9629: 0.2048, 1.0717: 0.2450, 1.1430: 0.2751, 1.2693: 0.3317, 1.3356: 0.3644, 1.4507: 0.4235,
                     1.5183: 0.4587, 1.6159: 0.5191, 1.6835: 0.5581, 1.8036: 0.6387, 1.9838: 0.7456, 2.1227: 0.8249,
                     2.2991: 0.9243, 2.4830: 1.0224, 2.6444: 1.1016, 2.8245: 1.1858, 3.0046: 1.2637, 3.1547: 1.3240,
                     3.2460: 1.3566}
        green_curve = {0.4109: 0.5120, 0.4959: 0.5042, 0.5859: 0.5040, 0.6734: 0.5114, 0.7709: 0.5301, 0.9210: 0.5727,
                       1.0886: 0.6367, 1.3138: 0.7435, 1.4814: 0.8379, 1.6666: 0.9600, 1.8043: 1.0569, 1.9520: 1.1652,
                       2.0846: 1.2584, 2.2573: 1.3768, 2.4300: 1.4964, 2.5652: 1.5845, 2.7028: 1.6676, 2.8379: 1.7456,
                       3.0006: 1.8286, 3.1682: 1.8913, 3.2157: 1.9064}
        blue_curve = {0.4040: 0.9088, 0.5690: 0.9109, 0.6741: 0.9246, 0.7866: 0.9483, 0.9567: 0.9997, 1.1393: 1.0700,
                      1.3170: 1.1555, 1.5146: 1.2649, 1.6936: 1.3757, 1.8412: 1.4675, 1.9976: 1.5645, 2.1378: 1.6601,
                      2.3092: 1.7684, 2.4744: 1.8754, 2.6396: 1.9786, 2.8035: 2.0755, 2.9486: 2.1572, 3.0637: 2.2151,
                      3.1363: 2.2490}
        red_log_exposure = xp.array(list(red_curve.keys()), dtype=default_dtype) - 3.35
        red_density_curve = xp.array(list(red_curve.values()), dtype=default_dtype)
        green_log_exposure = xp.array(list(green_curve.keys()), dtype=default_dtype) - 3.35
        green_density_curve = xp.array(list(green_curve.values()), dtype=default_dtype)
        blue_log_exposure = xp.array(list(blue_curve.keys()), dtype=default_dtype) - 3.35
        blue_density_curve = xp.array(list(blue_curve.values()), dtype=default_dtype)
        self.log_exposure = [red_log_exposure, green_log_exposure, blue_log_exposure]
        self.density_curve = [red_density_curve, green_density_curve, blue_density_curve]

        # spectral dye density
        red_sd = {361.2807: 0.1542, 364.5652: 0.1835, 369.3585: 0.2077, 376.9196: 0.2268, 385.2303: 0.2303,
                  395.2939: 0.2081, 410.6348: 0.1584, 421.6964: 0.1120, 437.5371: 0.0520, 451.1206: 0.0160,
                  469.4991: 0.0085, 488.1332: 0.0114, 520.6154: 0.0118, 537.2362: 0.0172, 552.2277: 0.0424,
                  563.9511: 0.0814, 575.5618: 0.1556, 587.1941: 0.2867, 604.5156: 0.4808, 615.7691: 0.6093,
                  624.8658: 0.6938, 640.6521: 0.8233, 654.4078: 0.9096, 662.7354: 0.9579, 672.3155: 0.9891,
                  684.4077: 1.0048, 700.2594: 0.9740, 712.5729: 0.9087, 722.8687: 0.8348, 735.7925: 0.7187,
                  749.9636: 0.5716, 762.2523: 0.4409, 774.7984: 0.3248, 786.8506: 0.2345, 800.5454: 0.1598}
        green_sd = {361.5332: 0.1559, 375.3613: 0.1010, 391.7104: 0.0539, 410.5828: 0.0205, 423.1695: 0.0121,
                    437.7732: 0.0106, 449.6131: 0.0246, 459.6968: 0.0557, 469.7928: 0.1196, 482.4264: 0.2352,
                    492.2961: 0.3663, 501.7949: 0.5154, 512.8165: 0.6965, 520.7927: 0.8146, 528.3835: 0.9120,
                    533.6905: 0.9629, 538.8631: 0.9914, 545.9178: 1.0027, 554.5935: 0.9727, 564.0057: 0.8928,
                    571.2741: 0.8033, 582.7847: 0.6122, 596.5530: 0.3988, 608.5880: 0.2629, 623.4081: 0.1675,
                    645.2893: 0.1007, 672.9720: 0.0606, 699.4035: 0.0412, 726.0865: 0.0209, 751.0098: 0.0083,
                    762.3382: 0.0016}
        blue_sd = {360.8571: 0.3661, 365.7536: 0.3300, 371.4090: 0.3033, 376.9460: 0.2965, 382.8695: 0.3130,
                   393.1032: 0.4079, 403.3512: 0.5407, 411.3264: 0.6562, 417.9116: 0.7579, 423.7343: 0.8407,
                   429.1772: 0.9183, 434.3557: 0.9623, 440.9142: 0.9934, 447.9695: 1.0065, 456.1449: 0.9850,
                   465.3053: 0.9051, 480.0926: 0.7227, 490.9886: 0.5713, 504.6466: 0.3992, 519.9671: 0.2952,
                   540.8417: 0.2300, 569.0209: 0.1710, 596.1837: 0.0879, 616.5636: 0.0460, 644.2518: 0.0205,
                   665.9021: 0.0088}
        self.spectral_density = [colour.SpectralDistribution(x) for x in (red_sd, green_sd, blue_sd)]

        self.mtf = [{2.5169: 1.1185, 3.5699: 1.0780, 6.3431: 1.0585, 10.1089: 1.0052, 14.5014: 0.9616, 18.7989: 0.8929,
                     22.3525: 0.8321, 26.0857: 0.7612, 31.8541: 0.6611, 38.2475: 0.5699, 45.2434: 0.4823,
                     57.4047: 0.3610, 65.7731: 0.3032, 77.9868: 0.2330}]

        # copied from kodak exr 5248
        red_rms = {0.0081: 0.0074, 0.5625: 0.0078, 1.2141: 0.0083, 1.4852: 0.0084, 1.9061: 0.0075, 2.2541: 0.0065,
                   2.7357: 0.0054, 3.1364: 0.0047, 3.6301: 0.0044, 4.0753: 0.0044, 4.5326: 0.0044, 4.9939: 0.0044}
        green_rms = {0.0121: 0.0086, 0.6151: 0.0093, 1.0643: 0.0103, 1.3395: 0.0115, 1.4852: 0.0117, 1.7159: 0.0104,
                     1.9547: 0.0083, 2.1773: 0.0068, 2.4444: 0.0061, 2.6993: 0.0061, 3.0554: 0.0065, 3.3144: 0.0063,
                     3.6463: 0.0060, 4.0550: 0.0059, 4.5245: 0.0059, 4.9980: 0.0063}
        blue_rms = {0.0202: 0.0111, 0.3399: 0.0091, 0.5868: 0.0094, 0.7770: 0.0113, 1.0279: 0.0157, 1.2546: 0.0190,
                    1.5217: 0.0201, 1.8495: 0.0180, 2.1327: 0.0153, 2.4605: 0.0134, 2.7398: 0.0130, 3.0231: 0.0129,
                    3.2821: 0.0122, 3.5208: 0.0115, 3.9417: 0.0113, 4.5892: 0.0112, 4.9960: 0.0112}
        red_rms_density = {0.0182: 0.2203, 0.4518: 0.2284, 0.7840: 0.2382, 0.9542: 0.2495, 1.1933: 0.2835,
                           1.5904: 0.3791, 2.4048: 0.6221, 3.4704: 0.9332, 4.1917: 1.1373, 5.0041: 1.3625}
        green_rms_density = {0.0122: 0.6237, 0.5166: 0.6189, 0.9988: 0.6529, 1.4972: 0.7647, 2.0199: 0.9883,
                             3.5069: 1.5326, 4.0174: 1.7173, 4.4854: 1.8566, 5.0020: 2.0608}
        blue_rms_density = {0.0162: 1.0239, 0.6179: 1.0304, 0.9947: 1.0595, 1.3169: 1.1260, 1.7545: 1.2847,
                            2.7087: 1.6671, 3.6244: 2.0381, 4.4246: 2.3248, 5.0000: 2.5095}
        self.rms_curve = [red_rms, green_rms, blue_rms]
        self.rms_density = [red_rms_density, green_rms_density, blue_rms_density]
        # read from curve
        self.rms = 5

        self.calibrate()
