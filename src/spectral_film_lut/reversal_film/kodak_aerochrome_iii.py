import colour

from spectral_film_lut.wratten_filters import WRATTEN
from spectral_film_lut.film_spectral import *


class KodakAerochromeIII(FilmSpectral):
    def __init__(self):
        super().__init__()

        self.iso = 40
        self.density_measure = "status_a"
        self.manufacturer = 'Kodak'
        self.stage = 'camera'
        self.type = 'positive'
        self.medium = 'photo'
        self.year = 2001

        # spectral sensitivity
        red_log_sensitivity = {410.0294: 1.2477, 422.4031: 1.2116, 434.2503: 1.1643, 445.8342: 1.0928, 456.8916: 0.9548,
                               466.3693: 0.8225, 474.2674: 0.6862, 480.5859: 0.5560, 485.8513: 0.4308, 491.1167: 0.3056,
                               496.3821: 0.1758, 501.6475: 0.0436, 509.7713: -0.0988, 520.0765: -0.1057,
                               530.0807: 0.0583, 539.0319: 0.0204, 545.8769: -0.1245, 555.3547: -0.2419,
                               567.0439: -0.2445, 578.5225: -0.1935, 590.1064: -0.1372, 601.6903: -0.0792,
                               613.2742: -0.0196, 624.8581: 0.0341, 636.4420: 0.0868, 648.4471: 0.1387,
                               659.6098: 0.1859, 671.1937: 0.2391, 682.8829: 0.2830, 693.8349: 0.3241, 705.7113: 0.3540,
                               717.5293: 0.3793, 729.1131: 0.3914, 740.6970: 0.3856, 752.2809: 0.3440, 763.7595: 0.2969,
                               775.4487: 0.2639, 786.5061: 0.2436, 798.6165: 0.2270, 809.9898: 0.2140, 821.7843: 0.1943,
                               833.3682: 0.1553, 844.9521: 0.1037, 856.5360: 0.0246, 867.5934: -0.0926,
                               876.5446: -0.2231, 882.8631: -0.3483, 887.6019: -0.4680, 891.8143: -0.5955,
                               896.0266: -0.7390, 899.1858: -0.8520, }
        green_log_sensitivity = {408.9763: 0.5547, 420.5602: 0.6153, 432.1441: 0.6565, 443.7280: 0.6691,
                                 455.3119: 0.6401, 465.4478: 0.5776, 475.3205: 0.4659, 482.1655: 0.3605,
                                 487.9575: 0.2557, 493.2229: 0.1526, 498.4883: 0.0359, 505.3333: -0.0637,
                                 515.3376: -0.1714, 526.9215: -0.2277, 538.5054: -0.2225, 548.5097: -0.1492,
                                 555.8812: -0.0414, 562.1997: 0.0619, 567.9917: 0.1769, 573.2571: 0.2882,
                                 579.0490: 0.3885, 585.3675: 0.4940, 592.2125: 0.5918, 599.5841: 0.6928,
                                 606.9557: 0.7905, 613.8007: 0.8928, 620.6457: 0.9984, 626.9642: 1.0974,
                                 632.7562: 1.2087, 639.0747: 1.3198, 648.0259: 1.4075, 656.4505: 1.3617,
                                 660.6628: 1.2493, 663.8221: 1.1218, 666.4548: 0.9971, 668.5610: 0.8870,
                                 670.6671: 0.7218, 672.7733: 0.5595, 674.8794: 0.4204, 678.0387: 0.2556,
                                 679.0918: 0.1160, 681.1979: -0.0260, 683.3041: -0.1651, 685.4103: -0.2984,
                                 687.5164: -0.4346, 689.6226: -0.5680, 691.7288: -0.6868, 693.8349: -0.7998,
                                 695.9411: -0.9163, }
        blue_log_sensitivity = {407.8063: 1.0722, 417.9275: 1.1241, 428.3998: 1.1617, 438.9892: 1.1565,
                                449.4615: 1.1398, 460.0508: 1.0963, 470.5816: 1.0470, 481.1124: 0.9873,
                                491.8188: 0.9414, 502.1741: 0.9770, 512.7049: 1.0545, 522.9432: 1.1359,
                                533.1083: 1.1913, 544.2973: 1.2151, 554.4186: 1.2248, 565.3590: 1.1710,
                                573.2571: 1.0534, 577.4694: 0.9305, 580.6286: 0.8107, 583.2613: 0.6928,
                                586.9471: 0.4595, 589.5798: 0.3363, 591.6860: 0.2233, 593.7922: 0.0958,
                                597.2147: -0.0971, 599.0576: -0.2694, 601.1637: -0.4028, 603.2699: -0.5390,
                                605.9026: -0.6617, 609.0618: -0.8124, 611.6945: -0.9129, }
        self.log_sensitivity = [red_log_sensitivity.copy(), green_log_sensitivity.copy(), blue_log_sensitivity.copy()]

        # sensiometry
        red_curve = {-1.8701: 3.4989, -1.7952: 3.4711, -1.4861: 3.4415, -1.4048: 3.4187, -1.3236: 3.3794,
                     -1.2424: 3.3308, -1.1611: 3.2875, -1.0799: 3.2449, -1.0098: 3.1808, -0.9618: 3.0980,
                     -0.9396: 3.0456, -0.8953: 2.9116, -0.8694: 2.8233, -0.8436: 2.7332, -0.8214: 2.6545,
                     -0.7993: 2.5770, -0.7771: 2.4970, -0.7550: 2.4158, -0.7328: 2.3359, -0.7107: 2.2485,
                     -0.6885: 2.1649, -0.6664: 2.0788, -0.6442: 1.9902, -0.6221: 1.9029, -0.5999: 1.8131,
                     -0.5777: 1.7257, -0.5556: 1.6409, -0.5334: 1.5572, -0.5113: 1.4764, -0.4891: 1.3936,
                     -0.4633: 1.3038, -0.4337: 1.2079, -0.4042: 1.1193, -0.3747: 1.0335, -0.3414: 0.9466,
                     -0.3045: 0.8573, -0.2639: 0.7718, -0.2196: 0.6857, -0.1716: 0.6053, -0.1162: 0.5233,
                     -0.0497: 0.4436, 0.0278: 0.3742, 0.1090: 0.3225, 0.1917: 0.2864, 0.2693: 0.2561, 0.3527: 0.2289,
                     0.4325: 0.2074, 0.7589: 0.1655, 0.8401: 0.1628, 0.9066: 0.1588, }
        green_curve = {-1.8627: 3.6331, -1.7815: 3.5861, -1.7002: 3.5411, -1.6375: 3.5020, -1.4972: 3.3399,
                       -1.4565: 3.2781, -1.3273: 3.0666, -1.2867: 2.9881, -1.2498: 2.9098, -1.2128: 2.8213,
                       -1.1796: 2.7384, -1.1501: 2.6600, -1.1205: 2.5797, -1.0910: 2.4995, -1.0614: 2.4164,
                       -1.0319: 2.3297, -1.0024: 2.2412, -0.9728: 2.1544, -0.7439: 1.4690, -0.7144: 1.3878,
                       -0.6848: 1.3094, -0.6516: 1.2226, -0.6147: 1.1296, -0.5777: 1.0389, -0.5408: 0.9473,
                       -0.5039: 0.8558, -0.4670: 0.7687, -0.4300: 0.6831, -0.3931: 0.6034, -0.3488: 0.5209,
                       -0.2934: 0.4306, -0.2233: 0.3447, -0.1420: 0.2793, -0.0661: 0.2426, 0.0234: 0.2181,
                       0.1017: 0.2078, 0.1497: 0.2041, 0.6147: 0.1735, 0.9337: 0.1568, }
        blue_curve = {-1.8701: 3.3060, -1.7889: 3.2962, -1.7076: 3.2832, -1.6264: 3.2664, -1.5452: 3.2493,
                      -1.4787: 3.2312, -1.3088: 3.1292, -1.2387: 3.0590, -1.1833: 2.9761, -1.1390: 2.8877,
                      -1.1058: 2.8002, -1.0799: 2.7172, -1.0578: 2.6385, -1.0356: 2.5511, -1.0134: 2.4626,
                      -0.9913: 2.3666, -0.9691: 2.2682, -0.9470: 2.1686, -0.9322: 2.1157, -0.8214: 1.5769,
                      -0.7993: 1.4736, -0.7771: 1.3727, -0.7550: 1.2804, -0.7328: 1.1968, -0.6922: 1.0520,
                      -0.6627: 0.9652, -0.6331: 0.8859, -0.5999: 0.8019, -0.5630: 0.7134, -0.5224: 0.6248,
                      -0.4781: 0.5375, -0.4300: 0.4566, -0.3673: 0.3757, -0.2897: 0.3068, -0.2085: 0.2554,
                      -0.1273: 0.2219, -0.0460: 0.2024, 0.0352: 0.1907, 0.1164: 0.1816, 0.1977: 0.1729, 0.2789: 0.1649,
                      0.3601: 0.1602, 0.4414: 0.1555, 0.5226: 0.1501, 0.6038: 0.1477, 0.6851: 0.1427, 0.7672: 0.1381,
                      0.8475: 0.1370, 0.9103: 0.1340, }
        red_log_exposure = xp.array(list(red_curve.keys()), dtype=default_dtype)
        red_density_curve = xp.array(list(red_curve.values()), dtype=default_dtype)
        green_log_exposure = xp.array(list(green_curve.keys()), dtype=default_dtype)
        green_density_curve = xp.array(list(green_curve.values()), dtype=default_dtype)
        blue_log_exposure = xp.array(list(blue_curve.keys()), dtype=default_dtype)
        blue_density_curve = xp.array(list(blue_curve.values()), dtype=default_dtype)
        self.log_exposure = [red_log_exposure, green_log_exposure, blue_log_exposure]
        self.density_curve = [red_density_curve, green_density_curve, blue_density_curve]

        # spectral dye density
        red_sd = {407.8583: 0.1951, 414.8538: 0.1690, 420.1004: 0.1481, 438.5510: 0.0860, 445.4841: 0.0659,
                  452.5906: 0.0489, 459.6250: 0.0346, 466.6204: 0.0244, 473.6159: 0.0171, 477.8132: 0.0122,
                  514.8893: 0.0227, 521.8848: 0.0352, 528.5305: 0.0505, 547.7681: 0.1180, 554.8025: 0.1520,
                  561.7591: 0.1923, 568.7546: 0.2405, 575.4003: 0.2969, 581.6962: 0.3545, 587.9922: 0.4109,
                  592.8890: 0.4537, 606.5302: 0.5797, 612.1266: 0.6350, 618.0728: 0.6910, 624.7185: 0.7443,
                  631.7140: 0.7940, 638.7095: 0.8352, 645.9770: 0.8684, 652.7005: 0.8926, 660.4829: 0.9132,
                  667.3910: 0.9215, 674.2699: 0.9219, 681.4986: 0.9137, 688.4941: 0.9033, 695.0232: 0.8898,
                  702.7182: 0.8681, }
        green_sd = {407.8583: 0.0724, 414.8538: 0.0911, 420.8000: 0.1056, 437.9389: 0.1350, 444.9344: 0.1438,
                    451.9299: 0.1506, 458.9254: 0.1591, 465.9209: 0.1750, 472.9164: 0.2014, 479.9119: 0.2422,
                    486.5576: 0.2934, 492.5038: 0.3511, 508.5934: 0.5486, 512.7907: 0.6105, 516.9880: 0.6686,
                    521.5350: 0.7266, 526.7817: 0.7852, 533.0776: 0.8433, 540.0731: 0.8935, 547.0686: 0.9193,
                    554.0641: 0.9207, 561.0596: 0.8898, 567.7053: 0.8403, 573.6514: 0.7838, 578.8981: 0.7257,
                    583.7949: 0.6670, 588.3420: 0.6091, 592.5393: 0.5538, 595.3375: 0.5226, 607.2298: 0.3816,
                    612.8262: 0.3220, 618.4226: 0.2657, 624.7185: 0.2124, 631.7140: 0.1668, 638.7095: 0.1276,
                    645.7050: 0.0967, 652.7005: 0.0732, 659.6960: 0.0542, 666.6914: 0.0397, 673.6869: 0.0284,
                    680.6824: 0.0199, 687.6779: 0.0139, 692.9245: 0.0108, }
        blue_sd = {405.4099: 0.6529, 412.0556: 0.7089, 419.0511: 0.7639, 426.0466: 0.8141, 433.0421: 0.8569,
                   440.0376: 0.8838, 447.0331: 0.8844, 454.0286: 0.8711, 461.0241: 0.8382, 467.3200: 0.7909,
                   472.2168: 0.7381, 476.4141: 0.6833, 480.9612: 0.6261, 485.8580: 0.5637, 489.0060: 0.5269,
                   494.9522: 0.4469, 507.1943: 0.3050, 512.7907: 0.2497, 519.0866: 0.1934, 526.0821: 0.1427,
                   531.3287: 0.1089, 545.6695: 0.0502, 552.6650: 0.0338, 559.6605: 0.0225, 565.2568: 0.0146, }
        midscale_sd = {404.3606: 0.9275, 408.9077: 0.9541, 422.5489: 1.0392, 429.5444: 1.0710, 436.5398: 1.0922,
                       443.5353: 1.0948, 450.5308: 1.0783, 457.5263: 1.0457, 461.7236: 1.0216, 472.9164: 0.9349,
                       479.9119: 0.8864, 486.9074: 0.8439, 492.8535: 0.8225, 505.7952: 0.8314, 512.7907: 0.8646,
                       519.7862: 0.9122, 525.7323: 0.9550, 538.6740: 1.0528, 545.6695: 1.0905, 552.6650: 1.1112,
                       559.6605: 1.1166, 566.6559: 1.1078, 573.6514: 1.0803, 580.6469: 1.0432, 584.4944: 1.0230,
                       594.9877: 0.9660, 607.2298: 0.9258, 614.2253: 0.9213, 621.2208: 0.9278, 628.2163: 0.9437,
                       635.2117: 0.9615, 642.2072: 0.9746, 649.2027: 0.9797, 656.1982: 0.9797, 663.1937: 0.9700,
                       670.1892: 0.9556, 677.1847: 0.9400, 681.0322: 0.9295, 697.8991: 0.8832, 702.7182: 0.8671, }

        self.spectral_density = [colour.SpectralDistribution(x) for x in (red_sd, green_sd, blue_sd)]
        self.d_ref_sd = colour.SpectralDistribution(midscale_sd)
        self.mtf = [{2.6116: 1.0233, 2.9423: 1.0282, 3.3148: 1.0293, 3.7346: 1.0239, 4.2074: 1.0147, 4.7402: 1.0019,
                     5.3404: 0.9798, 6.0166: 0.9511, 6.7784: 0.9150, 7.6450: 0.8692, 8.6036: 0.8182, 9.6930: 0.7613,
                     10.9204: 0.7027, 12.3031: 0.6500, 13.8609: 0.5991, 15.6160: 0.5457, 17.5933: 0.4898,
                     19.8210: 0.4322, 22.0900: 0.3812, 23.8312: 0.3467, 30.0848: 0.2530, 32.8098: 0.2229,
                     35.7816: 0.1967, 38.8117: 0.1738, 42.0984: 0.1529, 45.9116: 0.1334, 48.9965: 0.1206, }]

        # taken from kodak ektachrome 100
        red_rms = {-2.9756: 0.0307, -2.1453: 0.0279, -1.8942: 0.0311, -1.6395: 0.0298, -1.3500: 0.0238, -1.0779: 0.0169,
                   -0.8372: 0.0117, -0.6244: 0.0079, -0.4326: 0.0044, -0.2477: 0.0028, -0.1151: 0.0022, -0.0056: 0.0021}
        green_rms = {-2.5221: 0.0330, -2.1070: 0.0336, -1.7198: 0.0292, -1.4114: 0.0202, -1.0709: 0.0116,
                     -0.8233: 0.0074, -0.5895: 0.0041, -0.3837: 0.0026, -0.1744: 0.0019, -0.0042: 0.0017}
        blue_rms = {-2.0505: 0.0532, -1.9263: 0.0585, -1.8495: 0.0600, -1.7581: 0.0585, -1.5907: 0.0430,
                    -1.3465: 0.0300, -1.1233: 0.0219, -0.9767: 0.0162, -0.8372: 0.0112, -0.6872: 0.0071,
                    -0.5965: 0.0051, -0.4940: 0.0038, -0.3558: 0.0029, -0.2058: 0.0023, -0.0907: 0.0020, 0.0014: 0.0018}
        red_rms_density = {-2.9491: 3.2977, -2.7506: 3.2900, -2.5555: 3.2266, -2.3883: 3.1281, -2.2141: 2.9803,
                           -2.0058: 2.7100, -1.8630: 2.4538, -1.6811: 2.0336, -1.4652: 1.5739, -1.2123: 1.1667,
                           -1.0242: 0.9040, -0.7887: 0.6370, -0.6013: 0.4575, -0.4445: 0.3262, -0.2536: 0.2025,
                           -0.1170: 0.1401, -0.0063: 0.1182}
        green_rms_density = {-2.4998: 3.5549, -2.4127: 3.5002, -2.3117: 3.3962, -2.1514: 3.1499, -1.9633: 2.7559,
                             -1.6658: 2.0883, -1.4018: 1.5202, -1.1503: 1.0704, -0.8486: 0.6436, -0.5978: 0.3918,
                             -0.3504: 0.2047, -0.1414: 0.0974, -0.0028: 0.0591}
        blue_rms_density = {-2.0532: 2.8501, -1.8414: 2.2908, -1.5836: 1.7129, -1.3370: 1.2477, -1.0750: 0.8351,
                            -0.8723: 0.5735, -0.6953: 0.3864, -0.4814: 0.2080, -0.2703: 0.0919, -0.1101: 0.0394,
                            0.0000: 0.0296}
        self.rms_curve = [red_rms, green_rms, blue_rms]
        self.rms_density = [red_rms_density, green_rms_density, blue_rms_density]
        self.rms = 23

        self.color_masking = 0.0

        self.calibrate()

        spectral_shape_nri = colour.SpectralShape(380, 900, 5)

        self.log_sensitivity = [red_log_sensitivity, green_log_sensitivity, blue_log_sensitivity]

        self.log_sensitivity = xp.stack(
            [xp.asarray(colour.SpectralDistribution(x).align(spectral_shape_nri, extrapolator_kwargs={
                'method': 'linear'}).align(spectral_shape_nri).values) for x in self.log_sensitivity]).T
        self.sensitivity = 10 ** self.log_sensitivity
        self.sensitivity *= xp.concatenate([WRATTEN['12'], xp.ones(self.sensitivity.shape[0] - WRATTEN['12'].shape[0]) * WRATTEN['12'][-1]]).reshape(-1, 1)

        self.XYZ_to_exp = self.sensitivity.T @ densiometry.compute_xyz_dual(spectral_shape=spectral_shape_nri)[1]
