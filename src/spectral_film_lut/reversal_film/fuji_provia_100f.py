from spectral_film_lut.film_spectral import *


class FujiProvia100F(FilmSpectral):
    def __init__(self):
        super().__init__()

        self.iso = 100
        self.density_measure = "status_a"

        # spectral sensitivity
        red_log_sensitivity = {571.5337: -0.5466, 576.9325: -0.4540, 581.1043: -0.3572, 587.7301: -0.1152,
                               594.8466: 0.1483, 597.9141: 0.2525, 602.5767: 0.3413, 609.9387: 0.4228, 616.5644: 0.5129,
                               626.1350: 0.6936, 633.9877: 0.8713, 637.7301: 0.9540, 640.6135: 0.9926, 644.0491: 0.9896,
                               649.1411: 0.9026, 658.4049: 0.4271, 665.5215: -0.1765, 667.9141: -0.4032,
                               671.0429: -0.5870}
        green_log_sensitivity = {475.4601: -0.6097, 481.3497: -0.4491, 488.4663: -0.2163, 495.0307: -0.0012,
                                 499.6933: 0.1207, 511.1656: 0.3627, 524.2945: 0.5968, 533.1288: 0.7212,
                                 538.8344: 0.7929, 542.7607: 0.8082, 547.8528: 0.7978, 554.6012: 0.7647,
                                 559.8160: 0.7414, 565.3374: 0.7439, 570.5521: 0.7702, 574.2331: 0.7917,
                                 579.1411: 0.7825, 582.4540: 0.7151, 586.5031: 0.5251, 591.0429: 0.1299,
                                 594.7239: -0.2531, 597.6074: -0.6134}
        blue_log_sensitivity = {388.6503: -0.8536, 394.7239: -0.2561, 402.2086: 0.3811, 406.1350: 0.7120,
                                409.2025: 0.8192, 414.2331: 0.9007, 420.8589: 0.9436, 426.9939: 0.9485,
                                435.2761: 0.9620, 442.4540: 0.9988, 448.7730: 1.0551, 455.1534: 1.0809,
                                461.3497: 1.0613, 470.9202: 0.8744, 478.8344: 0.5527, 486.0123: 0.1513,
                                492.3926: -0.2010, 497.5460: -0.5043, 501.2270: -0.6605}
        self.log_sensitivity = [red_log_sensitivity, green_log_sensitivity, blue_log_sensitivity]

        # sensiometry
        red_curve = {-3.3819: 3.2890, -3.1206: 3.2916, -2.8652: 3.2832, -2.6506: 3.2438, -2.4426: 3.1769,
                     -2.2662: 3.0781, -2.0849: 2.9257, -1.9434: 2.7206, -1.9434: 2.7206, -1.7072: 2.2468,
                     -1.4526: 1.7580, -1.2504: 1.4030, -1.0291: 1.0288, -0.8087: 0.7065, -0.5458: 0.4018,
                     -0.3777: 0.2528, -0.2130: 0.1666, -0.0383: 0.1155, 0.1448: 0.0854, 0.3236: 0.0804, 0.8270: 0.0812}
        green_curve = {-3.3827: 3.4255, -3.1456: 3.4255, -2.8003: 3.4255, -2.6090: 3.4037, -2.4551: 3.3535,
                       -2.2804: 3.2564, -2.1356: 3.1258, -2.0125: 2.9400, -1.8794: 2.6872, -1.7587: 2.4360,
                       -1.5990: 2.0928, -1.4642: 1.7906, -1.2155: 1.3394, -0.9617: 0.9208, -0.6689: 0.5374,
                       -0.4750: 0.3282, -0.3844: 0.2587, -0.2879: 0.2009, -0.1547: 0.1498, -0.0300: 0.1122,
                       0.1032: 0.0887, 0.2529: 0.0820, 0.4900: 0.0820, 0.8270: 0.0820}
        blue_curve = {-3.3852: 3.3359, -3.0000: 3.3368, -2.7920: 3.3250, -2.5507: 3.2782, -2.4260: 3.2313,
                      -2.2779: 3.1317, -2.1689: 3.0170, -2.0033: 2.8194, -1.8702: 2.5683, -1.6780: 2.1882,
                      -1.4908: 1.8283, -1.2779: 1.4482, -1.0349: 1.0397, -0.8103: 0.7049, -0.6522: 0.5165,
                      -0.4584: 0.3148, -0.2754: 0.1967, -0.0549: 0.1197, 0.1572: 0.0837, 0.4110: 0.0820, 0.6439: 0.0837,
                      0.8270: 0.0837}
        red_log_exposure = xp.array(list(red_curve.keys()), dtype=default_dtype)
        red_density_curve = xp.array(list(red_curve.values()), dtype=default_dtype)
        green_log_exposure = xp.array(list(green_curve.keys()), dtype=default_dtype)
        green_density_curve = xp.array(list(green_curve.values()), dtype=default_dtype)
        blue_log_exposure = xp.array(list(blue_curve.keys()), dtype=default_dtype)
        blue_density_curve = xp.array(list(blue_curve.values()), dtype=default_dtype)
        self.log_exposure = [red_log_exposure, green_log_exposure, blue_log_exposure]
        self.density_curve = [red_density_curve, green_density_curve, blue_density_curve]

        # spectral dye density
        red_sd = {389.9301: 0.2806, 399.2208: 0.2436, 418.4016: 0.1976, 440.6394: 0.1585, 461.8581: 0.1280,
                  482.1179: 0.1076, 497.7023: 0.1034, 512.3876: 0.1161, 526.2937: 0.1422, 543.3167: 0.2086,
                  562.0779: 0.3096, 587.4925: 0.4978, 609.6104: 0.7052, 623.6963: 0.8370, 632.8671: 0.9046,
                  639.9401: 0.9467, 647.3726: 0.9796, 655.3447: 0.9982, 664.9351: 0.9911, 674.6454: 0.9561,
                  688.7313: 0.8658, 699.5804: 0.7719, 709.4106: 0.6717, 718.7013: 0.5799}
        green_sd = {388.9710: 0.1550, 407.7922: 0.1733, 420.3796: 0.1941, 429.5504: 0.2110, 439.5604: 0.2119,
                    446.8731: 0.2018, 456.4635: 0.2077, 466.5934: 0.2376, 480.8591: 0.3336, 493.7463: 0.4744,
                    506.5734: 0.6421, 517.6024: 0.8030, 525.3946: 0.9016, 529.2308: 0.9413, 534.0260: 0.9716,
                    538.4615: 0.9902, 543.5564: 0.9970, 551.5285: 0.9793, 557.9421: 0.9378, 564.0559: 0.8732,
                    578.6214: 0.6667, 587.4925: 0.5170, 599.6004: 0.3615, 610.0899: 0.2533, 623.6963: 0.1665,
                    639.4605: 0.1081, 663.3766: 0.0590, 685.1349: 0.0341, 703.8961: 0.0252, 717.0829: 0.0219}
        blue_sd = {389.8102: 0.4104, 397.1229: 0.5022, 407.9121: 0.6447, 418.8811: 0.8074, 426.9730: 0.9007,
                   431.7682: 0.9481, 437.0430: 0.9790, 441.9580: 0.9956, 445.9740: 0.9961, 452.1479: 0.9778,
                   457.5425: 0.9481, 462.6374: 0.8933, 469.8901: 0.7926, 477.2627: 0.6726, 486.9131: 0.5067,
                   493.9261: 0.3985, 500.3996: 0.3081, 510.2897: 0.2030, 519.8801: 0.1319, 533.3666: 0.0681,
                   546.1938: 0.0427, 559.4406: 0.0326, 572.9271: 0.0264, 595.1049: 0.0252, 629.5704: 0.0237,
                   653.2468: 0.0252, 675.4246: 0.0157, 692.2078: 0.0080, 708.3916: 0.0074, 719.0010: 0.0092}

        self.spectral_density = [colour.SpectralDistribution(x) for x in (red_sd, green_sd, blue_sd)]

        self.mtf = [{1.3438: 1.1709, 2.1505: 1.1722, 4.6331: 1.1659, 7.4302: 1.1622, 13.2662: 1.0955, 19.0687: 0.9756,
                     26.3137: 0.8077, 34.1195: 0.6323, 44.1459: 0.4413, 52.7004: 0.3346, 61.0497: 0.2580}]

        # copied from Ektachrome 100D
        red_rms = {-2.9756: 0.0307, -2.1453: 0.0279, -1.8942: 0.0311, -1.6395: 0.0298, -1.3500: 0.0238, -1.0779: 0.0169,
                   -0.8372: 0.0117, -0.6244: 0.0079, -0.4326: 0.0044, -0.2477: 0.0028, -0.1151: 0.0022, -0.0056: 0.0021}
        green_rms = {-2.5221: 0.0330, -2.1070: 0.0336, -1.7198: 0.0292, -1.4114: 0.0202, -1.0709: 0.0116,
                     -0.8233: 0.0074, -0.5895: 0.0041, -0.3837: 0.0026, -0.1744: 0.0019, -0.0042: 0.0017}
        blue_rms = {-2.0505: 0.0532, -1.9263: 0.0585, -1.8495: 0.0600, -1.7581: 0.0585, -1.5907: 0.0430,
                    -1.3465: 0.0300, -1.1233: 0.0219, -0.9767: 0.0162, -0.8372: 0.0112, -0.6872: 0.0071,
                    -0.5965: 0.0051, -0.4940: 0.0038, -0.3558: 0.0029, -0.2058: 0.0023, -0.0907: 0.0020, 0.0014: 0.0018}
        red_rms_density = {-2.9491: 3.2977, -2.7506: 3.2900, -2.5555: 3.2266, -2.3883: 3.1281, -2.2141: 2.9803,
                           -2.0058: 2.7100, -1.8630: 2.4538, -1.6811: 2.0336, -1.4652: 1.5739, -1.2123: 1.1667,
                           -1.0242: 0.9040, -0.7887: 0.6370, -0.6013: 0.4575, -0.4445: 0.3262, -0.2536: 0.2025,
                           -0.1170: 0.1401, -0.0063: 0.1182}
        green_rms_density = {-2.4998: 3.5549, -2.4127: 3.5002, -2.3117: 3.3962, -2.1514: 3.1499, -1.9633: 2.7559,
                             -1.6658: 2.0883, -1.4018: 1.5202, -1.1503: 1.0704, -0.8486: 0.6436, -0.5978: 0.3918,
                             -0.3504: 0.2047, -0.1414: 0.0974, -0.0028: 0.0591}
        blue_rms_density = {-2.0532: 2.8501, -1.8414: 2.2908, -1.5836: 1.7129, -1.3370: 1.2477, -1.0750: 0.8351,
                            -0.8723: 0.5735, -0.6953: 0.3864, -0.4814: 0.2080, -0.2703: 0.0919, -0.1101: 0.0394,
                            0.0000: 0.0296}
        self.rms_curve = [red_rms, green_rms, blue_rms]
        self.rms_density = [red_rms_density, green_rms_density, blue_rms_density]
        self.rms = 9

        self.calibrate(True)
