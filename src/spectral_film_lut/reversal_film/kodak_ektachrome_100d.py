from spectral_film_lut.film_spectral import *


class KodakEktachrome100D(FilmSpectral):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.iso = 100
        self.density_measure = "status_a"
        self.white_xy = [0.3127, 0.329]
        self.white_sd = colour.SDS_ILLUMINANTS['D65']

        # spectral sensitivity
        self.red_log_sensitivity = {554.0856: -1.0220, 564.3580: -0.9702, 573.3463: -0.6981, 588.6381: 0.4380,
                                    599.3774: 0.6926, 631.5953: 1.1752, 641.6342: 1.3438, 647.1206: 1.4066,
                                    652.1401: 1.3945, 656.4591: 1.2226, 661.2451: 0.7135, 669.5331: 0.0083,
                                    684.5914: -0.9967}
        self.green_log_sensitivity = {472.8405: -0.5647, 483.1128: -0.0413, 493.8521: 0.3939, 500.0389: 0.5295,
                                      530.1556: 0.9934, 543.4630: 1.1873, 548.8327: 1.1961, 555.2529: 1.1510,
                                      564.5914: 1.2083, 568.3268: 1.1829, 573.4630: 1.2182, 576.9650: 1.1598,
                                      581.8677: 0.6915, 590.5058: -0.0028, 600.3113: -0.6088, 604.5136: -1.0022}
        self.blue_log_sensitivity = {394.7471: 0.5262, 398.0156: 0.8127, 404.4358: 1.0937, 410.9728: 1.3008,
                                     419.6109: 1.4375, 427.0817: 1.5047, 430.3502: 1.4848, 434.4358: 1.3747,
                                     439.1051: 1.3339, 446.1089: 1.3328, 456.3813: 1.3736, 467.9377: 1.2479,
                                     474.9416: 0.7631, 481.7121: 0.3609, 487.1984: 0.1515, 498.4047: -0.1041,
                                     505.2918: -0.2782, 514.0467: -0.5372, 519.6498: -0.7686}

        # sensiometry
        red_curve = {-2.7798: 3.2106, -2.6443: 3.2083, -2.5027: 3.1863, -2.3980: 3.1532, -2.3094: 3.1028,
                     -2.1973: 3.0302, -2.1087: 2.9527, -2.0225: 2.8481, -1.9080: 2.6943, -1.8133: 2.5527,
                     -1.6680: 2.3004, -1.4231: 1.8757, -1.2483: 1.5864, -1.0415: 1.2540, -0.8224: 0.9525,
                     -0.5823: 0.6941, -0.3718: 0.5022, -0.2142: 0.3853, -0.1009: 0.3177, 0.0186: 0.2550}
        green_curve = {-2.7784: 3.6098, -2.6935: 3.6049, -2.5703: 3.5804, -2.4595: 3.5424, -2.3314: 3.4686,
                       -2.1948: 3.3653, -2.0778: 3.2115, -1.9350: 2.9727, -1.8267: 2.7498, -1.6434: 2.3546,
                       -1.4563: 1.9187, -1.3492: 1.6910, -1.2163: 1.4324, -1.0957: 1.2232, -0.9406: 0.9955,
                       -0.7892: 0.7924, -0.6279: 0.6201, -0.4691: 0.4688, -0.3324: 0.3704, -0.1674: 0.2856,
                       0.0161: 0.2168}
        blue_curve = {-2.7685: 3.8081, -2.6380: 3.7713, -2.5309: 3.7185, -2.4201: 3.6447, -2.3265: 3.5598,
                      -2.2551: 3.4650, -2.1332: 3.2853, -1.9154: 2.8421, -1.7259: 2.3927, -1.5240: 1.9002,
                      -1.3234: 1.4693, -1.1487: 1.1738, -0.9394: 0.8661, -0.7757: 0.6729, -0.5971: 0.4859,
                      -0.4223: 0.3555, -0.2438: 0.2646, 0.0148: 0.2070}
        self.red_log_exposure = np.array(list(red_curve.keys()))
        self.red_density_curve = np.array(list(red_curve.values()))
        self.green_log_exposure = np.array(list(green_curve.keys()))
        self.green_density_curve = np.array(list(green_curve.values()))
        self.blue_log_exposure = np.array(list(blue_curve.keys()))
        self.blue_density_curve = np.array(list(blue_curve.values()))

        self.exposure_base = 10

        # spectral dye density
        red_spectral_density = {400.3102: 0.1455, 418.3040: 0.0948, 439.4002: 0.0578, 459.8759: 0.0422,
                                481.2823: 0.0358, 507.9628: 0.0582, 534.9535: 0.1194, 549.8449: 0.1813,
                                563.8056: 0.2593, 579.7518: 0.3799, 597.3113: 0.5560, 612.0786: 0.7056,
                                624.6122: 0.8097, 638.2627: 0.8955, 650.2999: 0.9369, 662.3992: 0.9410,
                                675.8014: 0.9030, 685.3568: 0.8507, 699.9380: 0.7448}
        green_spectral_density = {399.6898: 0.0731, 420.4757: 0.1119, 428.9142: 0.1351, 439.5243: 0.1429,
                                  443.7435: 0.1313, 455.5946: 0.1381, 468.0662: 0.1840, 481.5305: 0.2668,
                                  499.5243: 0.4451, 514.6019: 0.6530, 528.4385: 0.8172, 534.9535: 0.8780,
                                  540.8480: 0.9142, 547.4871: 0.9313, 555.2430: 0.9220, 562.6887: 0.8806,
                                  569.5140: 0.8127, 580.3102: 0.6716, 591.1686: 0.4884, 599.1727: 0.3638,
                                  610.8997: 0.2366, 621.5098: 0.1530, 636.7115: 0.0843, 655.6360: 0.0388,
                                  675.4912: 0.0172, 699.6898: 0.0090}
        blue_spectral_density = {400.0000: 0.5056, 418.5522: 0.7466, 425.8118: 0.8250, 434.3744: 0.8877,
                                 442.5026: 0.9213, 451.8097: 0.9045, 456.4633: 0.8862, 460.1861: 0.8582,
                                 472.8438: 0.6993, 488.4178: 0.4739, 501.5719: 0.2910, 511.8097: 0.1817,
                                 525.0879: 0.0881, 539.7311: 0.0299, 562.4405: 0.0019, 699.5657: 0.0067}
        midscale_spectral_density = {400.0000: 0.5056, 418.5522: 0.7466, 425.8118: 0.8250, 434.3744: 0.8877,
                                     442.5026: 0.9213, 451.8097: 0.9045, 456.4633: 0.8862, 460.1861: 0.8582,
                                     472.8438: 0.6993, 488.4178: 0.4739, 501.5719: 0.2910, 511.8097: 0.1817,
                                     525.0879: 0.0881, 539.7311: 0.0299, 562.4405: 0.0019, 699.5657: 0.0067}

        self.red_mtf = {2.4954: 0.9471, 7.1631: 0.8595, 9.9589: 0.7953, 13.1782: 0.7204, 15.1843: 0.6930,
                        16.8730: 0.6930, 19.7971: 0.6666, 24.3246: 0.5830, 32.4541: 0.4151, 46.4797: 0.2411,
                        57.3925: 0.1684, 67.3387: 0.1230, 77.7175: 0.0829}
        self.green_mtf = {2.4954: 0.9471, 9.0215: 0.8884, 11.9378: 0.8397, 14.3334: 0.8141, 18.1416: 0.7969,
                          22.8484: 0.7317, 29.8385: 0.6014, 41.7591: 0.4299, 54.5347: 0.3226, 66.2383: 0.2416,
                          78.6190: 0.1816}
        self.blue_mtf = {2.4954: 0.9563, 7.9074: 0.9657, 11.6463: 0.9164, 14.0528: 0.8562, 18.2015: 0.8612,
                         20.6977: 0.8300, 24.1649: 0.7547, 32.4007: 0.6653, 53.2911: 0.4258, 78.6190: 0.2866}

        self.red_rms = {-2.9756: 0.0307, -2.1453: 0.0279, -1.8942: 0.0311, -1.6395: 0.0298, -1.3500: 0.0238,
                        -1.0779: 0.0169, -0.8372: 0.0117, -0.6244: 0.0079, -0.4326: 0.0044, -0.2477: 0.0028,
                        -0.1151: 0.0022, -0.0056: 0.0021}
        self.green_rms = {-2.5221: 0.0330, -2.1070: 0.0336, -1.7198: 0.0292, -1.4114: 0.0202, -1.0709: 0.0116,
                          -0.8233: 0.0074, -0.5895: 0.0041, -0.3837: 0.0026, -0.1744: 0.0019, -0.0042: 0.0017}
        self.blue_rms = {-2.0505: 0.0532, -1.9263: 0.0585, -1.8495: 0.0600, -1.7581: 0.0585, -1.5907: 0.0430,
                         -1.3465: 0.0300, -1.1233: 0.0219, -0.9767: 0.0162, -0.8372: 0.0112, -0.6872: 0.0071,
                         -0.5965: 0.0051, -0.4940: 0.0038, -0.3558: 0.0029, -0.2058: 0.0023, -0.0907: 0.0020,
                         0.0014: 0.0018}
        self.red_rms_density = {-2.9491: 3.2977, -2.7506: 3.2900, -2.5555: 3.2266, -2.3883: 3.1281, -2.2141: 2.9803,
                                -2.0058: 2.7100, -1.8630: 2.4538, -1.6811: 2.0336, -1.4652: 1.5739, -1.2123: 1.1667,
                                -1.0242: 0.9040, -0.7887: 0.6370, -0.6013: 0.4575, -0.4445: 0.3262, -0.2536: 0.2025,
                                -0.1170: 0.1401, -0.0063: 0.1182}
        self.green_rms_density = {-2.4998: 3.5549, -2.4127: 3.5002, -2.3117: 3.3962, -2.1514: 3.1499, -1.9633: 2.7559,
                                  -1.6658: 2.0883, -1.4018: 1.5202, -1.1503: 1.0704, -0.8486: 0.6436, -0.5978: 0.3918,
                                  -0.3504: 0.2047, -0.1414: 0.0974, -0.0028: 0.0591}
        self.blue_rms_density = {-2.0532: 2.8501, -1.8414: 2.2908, -1.5836: 1.7129, -1.3370: 1.2477, -1.0750: 0.8351,
                                 -0.8723: 0.5735, -0.6953: 0.3864, -0.4814: 0.2080, -0.2703: 0.0919, -0.1101: 0.0394,
                                 0.0000: 0.0296}

        self.red_sd = colour.SpectralDistribution(red_spectral_density)
        self.green_sd = colour.SpectralDistribution(green_spectral_density)
        self.blue_sd = colour.SpectralDistribution(blue_spectral_density)
        self.d_ref_sd = colour.SpectralDistribution(midscale_spectral_density)

        self.calibrate()
