from spectral_film_lut.film_spectral import *


class KodakTriX400(FilmSpectral):
    def __init__(self, dev_time=6, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.iso = 400
        self.density_measure = 'bw'
        self.exposure_kelvin = 5500
        self.projection_kelvin = None

        # spectral sensitivity
        self.log_sensitivity = [
            {300.1055: 2.4887, 321.9299: 2.5772, 340.0896: 2.6570, 354.3111: 2.6946, 378.6516: 2.7090, 399.7103: 2.6975,
             420.8784: 2.6709, 439.4210: 2.6171, 454.9552: 2.5500, 472.7320: 2.4227, 485.8595: 2.3157, 497.2367: 2.2417,
             506.0977: 2.2232, 514.0289: 2.2434, 529.8366: 2.3163, 548.4339: 2.3944, 564.2963: 2.4424, 575.5640: 2.4539,
             587.9258: 2.4140, 596.5680: 2.3764, 605.6479: 2.3770, 612.9774: 2.4030, 619.9787: 2.4146, 625.3391: 2.3938,
             630.3713: 2.3261, 634.6378: 2.2203, 643.6629: 1.6766, 649.9532: 1.1155, 657.6109: 0.5313, 664.9951: 0.1553,
             668.2770: 0.0107}]

        # sensiometry - characteristic curve
        curve = {
            6: {-3.4456: 0.3135, -3.2607: 0.3229, -3.0592: 0.3402, -2.8861: 0.3690, -2.7272: 0.4115, -2.5411: 0.4804,
                -2.2369: 0.6329, -1.6971: 0.9270, -1.3725: 1.1201, -1.0053: 1.3483, -0.6974: 1.5375, -0.2739: 1.7850,
                -0.0204: 1.9212, 0.3395: 2.0999},
            7: {-3.4444: 0.3284, -3.3158: 0.3393, -3.1488: 0.3566, -2.9881: 0.3764, -2.8335: 0.4120, -2.6932: 0.4620,
                -2.5528: 0.5289, -2.2907: 0.6779, -1.9185: 0.9012, -1.6062: 1.1017, -1.1333: 1.4162, -0.7932: 1.6414,
                -0.4773: 1.8390, 0.0013: 2.1093, 0.3246: 2.2732},
            9: {-3.4425: 0.3541, -3.2817: 0.3714, -3.1531: 0.3893, -2.9850: 0.4185, -2.8743: 0.4536, -2.7364: 0.5116,
                -2.5843: 0.6002, -2.3661: 0.7537, -2.1083: 0.9512, -1.7985: 1.1914, -1.5345: 1.3934, -1.1611: 1.6870,
                -0.7703: 1.9727, -0.3715: 2.2316, -0.0204: 2.4435, 0.1899: 2.5648, 0.3463: 2.6475},
            11: {-3.4413: 0.3828, -3.2076: 0.4160, -3.0561: 0.4457, -2.9324: 0.4853, -2.8354: 0.5264, -2.7253: 0.5918,
                 -2.6153: 0.6670, -2.4514: 0.8032, -2.3018: 0.9458, -2.0650: 1.1696, -1.8294: 1.3869, -1.5660: 1.6266,
                 -1.4195: 1.7568, -1.2551: 1.9048, -1.0974: 2.0435, -0.8779: 2.2192, -0.7363: 2.3237, -0.4321: 2.5282,
                 -0.2120: 2.6738, 0.0044: 2.8124, 0.2103: 2.9397, 0.3407: 3.0209}}
        curve = curve[dev_time]
        self.log_exposure = [xp.array(list(curve.keys()), dtype=default_dtype)]
        self.density_curve = [xp.array(list(curve.values()), dtype=default_dtype)]

        self.exposure_base = 10

        self.mtf = [{2.4816: 1.0537, 4.0332: 1.0757, 6.4830: 1.0922, 9.7272: 1.1032, 15.2838: 1.0707, 20.6312: 1.0254,
                     26.1407: 0.9698, 32.6765: 0.8663, 38.4819: 0.7641, 45.4302: 0.6366, 53.4356: 0.4976,
                     60.9117: 0.3772, 66.7139: 0.3030, 71.8216: 0.2471, }]

        # curve from kodak 2303
        self.rms_curve = [
            {-0.0046: 0.0624, 0.3563: 0.0684, 0.6135: 0.0805, 0.7653: 0.0865, 0.8861: 0.1147, 1.0194: 0.1851,
             1.1278: 0.2615, 1.2239: 0.3501, 1.3029: 0.4708, 1.4284: 0.7001, 1.6050: 1.1146, 1.9101: 2.0802,
             2.1425: 2.8689, 2.2603: 3.2270, 2.3176: 3.4000}]
        self.rms_density = [
            {-0.0017: 0.0018, 0.1229: 0.0020, 0.2782: 0.0019, 0.4386: 0.0023, 0.6195: 0.0024, 0.7833: 0.0027,
             0.8840: 0.0033, 1.0273: 0.0040, 1.2235: 0.0050, 1.4352: 0.0070, 1.6109: 0.0090, 1.8362: 0.0114,
             2.0802: 0.0140, 2.2747: 0.0158, 2.4215: 0.0175, 2.5580: 0.0211}]
        self.rms = 17

        self.calibrate()


class KodakTriX400Dev6(KodakTriX400):
    def __init__(self, *args, **kwargs):
        super().__init__(6, *args, **kwargs)

class KodakTriX400Dev7(KodakTriX400):
    def __init__(self, *args, **kwargs):
        super().__init__(7, *args, **kwargs)

class KodakTriX400Dev9(KodakTriX400):
    def __init__(self, *args, **kwargs):
        super().__init__(9, *args, **kwargs)

class KodakTriX400Dev11(KodakTriX400):
    def __init__(self, *args, **kwargs):
        super().__init__(11, *args, **kwargs)